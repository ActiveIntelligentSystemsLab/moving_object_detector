#!/usr/bin/env python
# -*- coding: utf-8 -*-

import nav_msgs.msg
import rospy
import tf2_odometry_msg
import tf2_ros

class OdometryFrameConverter:
    def __init__(self):
        rospy.init_node('odometry_frame_converter')

        self._target_frame = rospy.get_param('~target_frame')

        self.rate = rospy.Rate(10.0)

        self._tf_buffer = tf2_ros.Buffer()
        self._listener = tf2_ros.TransformListener(self._tf_buffer)

        self._pub = rospy.Publisher('odom_converted', nav_msgs.msg.Odometry, queue_size=30)
        self._sub = rospy.Subscriber('odom', nav_msgs.msg.Odometry, self.callback)

    def callback(self, in_msg):
        rospy.loginfo(self._target_frame)
        while not rospy.is_shutdown():
            try:
                self._tf_buffer.lookup_transform(self._target_frame, in_msg.header.frame_id, in_msg.header.stamp)
            except(tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
                self.rate.sleep()
                raise
                continue
            break

        out_msg = self._tf_buffer.transform(in_msg, self._target_frame)
        self._pub.publish(out_msg)

if __name__ == '__main__':
    conveter = OdometryFrameConverter()
    rospy.spin()
