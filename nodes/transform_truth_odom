#!/usr/bin/env python
# -*- coding: utf-8 -*-

import geometry_msgs.msg
import nav_msgs.msg
import rospy
import tf.transformations
import tf2_odometry_msg
import tf2_ros

import inspect

class OdometryFrameConverter:
    def __init__(self):
        rospy.init_node('transform_truth_odom')
        
        self._transform = geometry_msgs.msg.TransformStamped()
        self._transform.transform.translation.x = rospy.get_param('~translation_x')
        self._transform.transform.translation.y = rospy.get_param('~translation_y')
        self._transform.transform.translation.z = 0
        quaternion = tf.transformations.quaternion_from_euler(0, 0, rospy.get_param('~yaw'))
        self._transform.transform.rotation.x = quaternion[0]
        self._transform.transform.rotation.y = quaternion[1]
        self._transform.transform.rotation.z = quaternion[2]
        self._transform.transform.rotation.w = quaternion[3]
        
        self._pub = rospy.Publisher('odom_converted', nav_msgs.msg.Odometry, queue_size=30)
        self._sub = rospy.Subscriber('odom', nav_msgs.msg.Odometry, self.callback)

    def callback(self, in_msg):
        out_msg = tf2_odometry_msg.do_transform_odometry(in_msg, self._transform)
        out_msg.header = in_msg.header
        self._pub.publish(out_msg)

if __name__ == '__main__':
    conveter = OdometryFrameConverter()
    rospy.spin()
